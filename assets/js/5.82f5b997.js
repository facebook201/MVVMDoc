(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{175:function(t,e,s){"use strict";s.r(e);var i=s(0),r=Object(i.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("它是一种 万维网的风格，它的缩写是 Representational State Transfer（表象层状态转变）")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("数据存储在 Server端，Client端只需要使用就行，两端分离有利于 client端代码的可可移植性，server 专注于数据存储，扩展性强，两端独立开发。")]),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("客户端的每一次请求带有充分的信息能够让服务端识别。请求所需的一些信息都包含在URL的查询参数、header、body，服务端能够根据请求的各种参数，无需保存客户端的状态，将响应正确返回给客户端。无状态的特征大大提高的服务端的健壮性和可拓展性。")]),t._v(" "),t._m(6),t._v(" "),s("p",[t._v("这个才是REST架构的核心，统一的接口对于RESTful服务非常重要。客户端只需要关注实现接口就可以，接口的可读性加强，使用人员方便调用。")]),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("服务端返回的数据格式要么是XML，要么是Json（获取数据），或者直接返回状态码。")]),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("客户端可以缓存页面的响应内容。因此响应都应隐式或显式的定义为可缓存的，若不可缓存则要避免客户端在多次请求后用旧数据或脏数据来响应。管理得当的缓存会部分地或完全地除去客户端和服务端之间的交互，进一步改善性能和延展性")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),s("p",[t._v("github开放平台 "),s("a",{attrs:{href:"https://developer.github.com/v3/",target:"_blank",rel:"noopener noreferrer"}},[t._v("RESTful规范 "),s("OutboundLink")],1)]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"restful-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restful-api","aria-hidden":"true"}},[this._v("#")]),this._v(" RESTful API")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"restful-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restful-是什么","aria-hidden":"true"}},[this._v("#")]),this._v(" RESTful 是什么")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Representational ： 数据的表现形式（JSON、XML ...）")]),this._v(" "),e("li",[this._v("State：当前状态或者数据")]),this._v(" "),e("li",[this._v("Transfer：传输")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"六大原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六大原则","aria-hidden":"true"}},[this._v("#")]),this._v(" 六大原则")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1、c-s架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、c-s架构","aria-hidden":"true"}},[this._v("#")]),this._v(" 1、C-S架构")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2、无状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、无状态","aria-hidden":"true"}},[this._v("#")]),this._v(" 2、无状态")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3、统一的接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、统一的接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 3、统一的接口")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4、一致的数据格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、一致的数据格式","aria-hidden":"true"}},[this._v("#")]),this._v(" 4、一致的数据格式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5、缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" 5、缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_6、分层系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、分层系统","aria-hidden":"true"}},[this._v("#")]),this._v(" 6、分层系统")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("每层只知道相邻的一层，后面是什么就不知道")]),this._v(" "),e("li",[this._v("客户端不知道是和代理还是真实服务端通信")]),this._v(" "),e("li",[this._v("其它层：安全层、负载均衡、缓存层等等")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"api-设计实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api-设计实践","aria-hidden":"true"}},[this._v("#")]),this._v(" API 设计实践")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("URI使用名字 尽量是复数 如 /users")]),this._v(" "),e("li",[this._v("URI 使用嵌套表示关联关系 /users/12/repos/5")]),this._v(" "),e("li",[this._v("HTTP 方法 GET/POST/PUT/DELETE")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"响应设计规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应设计规范","aria-hidden":"true"}},[this._v("#")]),this._v(" 响应设计规范")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("查询")]),this._v(" "),e("li",[this._v("分页")]),this._v(" "),e("li",[this._v("字段过滤 返回指定的字段")]),this._v(" "),e("li",[this._v("状态码")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安全","aria-hidden":"true"}},[this._v("#")]),this._v(" 安全")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("HTTPS")]),this._v(" "),e("li",[this._v("登录鉴权")]),this._v(" "),e("li",[this._v("限流 限制请求次数")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"http-options-方法的作用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-options-方法的作用？","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTP options 方法的作用？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("检测服务器所支持的请求方法")])]),this._v(" "),e("li",[e("p",[this._v("CORS中的预请求")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"allowedmethods-作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#allowedmethods-作用","aria-hidden":"true"}},[this._v("#")]),this._v(" allowedMethods 作用")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("响应options方法，告诉它所支持的请求方法")]),this._v(" "),e("li",[this._v("相应地返回 405 不允许（支持但是没有这样写）和 501 （内部没有实现这个请求方法 例如 LINK LOCK）没有实现")])])}],!1,null,null,null);e.default=r.exports}}]);