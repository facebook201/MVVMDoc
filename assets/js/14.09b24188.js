(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{184:function(t,e,a){"use strict";a.r(e);var r=a(0),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"guides-导航指南"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#guides-导航指南","aria-hidden":"true"}},[t._v("#")]),t._v(" Guides 导航指南")]),t._v(" "),a("h2",{attrs:{id:"primary-components"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#primary-components","aria-hidden":"true"}},[t._v("#")]),t._v(" Primary Components")]),t._v(" "),a("p",[t._v("There are three primary categories of components in React Router。React-Router 里面的组件主要分三类。")]),t._v(" "),a("ul",[a("li",[t._v("routers, like BrowserRouter HashRouter")]),t._v(" "),a("li",[t._v("route matchers like Route and Switch")]),t._v(" "),a("li",[t._v("navigation, Link, NavLink and Redirect")])]),t._v(" "),a("h3",{attrs:{id:"routers-路由器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#routers-路由器","aria-hidden":"true"}},[t._v("#")]),t._v(" Routers 路由器")]),t._v(" "),a("ul",[a("li",[t._v("BrowserRouter 是常规的URL路径，需要服务器匹配正确的路径")]),t._v(" "),a("li",[t._v("HashRouter 是hash模式的路径")])]),t._v(" "),a("h3",{attrs:{id:"router-matchers-路由匹配器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router-matchers-路由匹配器","aria-hidden":"true"}},[t._v("#")]),t._v(" Router Matchers 路由匹配器")]),t._v(" "),a("p",[t._v("Switch 和 Route，当 Switch 渲染的时候，会找子组件Route元素，查找其路径与当前URL匹配的元素，会忽视其他所有的。\n所以我们应该把特定路径较长的放在较短之前。")]),t._v(" "),a("p",[t._v('Route path 匹配URL的开头，而不是整个开头。因此，<Route path="/"> 始终匹配。通常放在最后，或者使用 exact 与整个URL匹配。')]),t._v(" "),a("p",[t._v("Link 组件是用来调转的，NavLink是一种特殊的 Link，当它的 prop 与当前位置匹配时，可以将其自身设置为 active。")]),t._v(" "),a("h2",{attrs:{id:"server-rendering"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server-rendering","aria-hidden":"true"}},[t._v("#")]),t._v(" Server Rendering")]),t._v(" "),a("h3",{attrs:{id:"scroll-restoration-滚动还原"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scroll-restoration-滚动还原","aria-hidden":"true"}},[t._v("#")]),t._v(" Scroll Restoration 滚动还原")]),t._v(" "),a("p",[t._v("滚动还原主要是使用 history.pushState 方法，")]),t._v(" "),a("h3",{attrs:{id:"redux-integration-redux-整合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-integration-redux-整合","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux Integration Redux 整合")]),t._v(" "),a("h3",{attrs:{id:"阻止更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻止更新","aria-hidden":"true"}},[t._v("#")]),t._v(" 阻止更新")]),t._v(" "),a("p",[t._v("通常情况下，React Router 和 Redux 可以一起工作，但是偶尔，应用在更在子路线火活动导航链接未更新时，应用程序可能不会更新。")]),t._v(" "),a("ul",[a("li",[t._v("组件通过 redux 的 connect() 联系起来。 connect()(Comp);")]),t._v(" "),a("li",[t._v("组件不是一个 路由组件，呈现方式不是这种 <Route component={SomeConnectedThing} />")])]),t._v(" "),a("p",[t._v("问题在于Redux实现了shouldComponentUpdate，如果没有从路由器接收道具，则没有任何变化的迹象，可以使用 withRouter 包裹你的组件。")]),t._v(" "),a("div",{staticClass:"language-tsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-tsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// before")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mapStateToProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Something"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// after")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" withRouter "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-router-dom'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("withRouter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mapStateToProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Something"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"deep-integration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deep-integration","aria-hidden":"true"}},[t._v("#")]),t._v(" Deep integration")])])}],!1,null,null,null);e.default=s.exports}}]);